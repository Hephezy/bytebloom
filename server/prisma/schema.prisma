generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  posts     Post[]
  comments  Comment[]
  createdAt DateTime!  @default(now())
}

model Post {
  id          Int                @id @default(autoincrement())
  title       String
  content     String?
  published   Boolean            @default(false)
  coverImage  String?
  categories  PostCategory[]     // Changed: many-to-many relation
  images      Image[]
  comments    Comment[]
  author      User               @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime!           @default(now())
  updatedAt   DateTime!           @updatedAt
}

model Category {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  slug        String         @unique
  description String?
  posts       PostCategory[] // Changed: many-to-many relation
  createdAt   DateTime!       @default(now())
}

// Join table for many-to-many relationship
model PostCategory {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  assignedAt DateTime! @default(now())

  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  caption   String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  order     Int      @default(0)
  createdAt DateTime! @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime! @default(now())
  updatedAt DateTime! @updatedAt
}